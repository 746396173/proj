加载任务目录脚本("任务黑名单.lua");

加载自带的事件();

定义函数 选择频道事件()
	LuaLog("触发了->选择频道事件");
	随机选择频道()
结束
注册普通事件(选择频道事件, "选择频道事件后");
绑定事件("选择频道事件", "选择频道事件后");

定义函数 选择角色事件()
	LuaLog("触发了->选择角色事件");
	自动创建或选择角色();
结束
注册普通事件(选择角色事件, "选择角色事件后");
绑定事件("选择角色事件", "选择角色事件后");

定义函数 做完一个任务后()
	局部变量 激活的事件 = 获取事件绑定的数据("处理完一个任务事件")
	激活事件(激活的事件);
	LuaLog("触发了->处理完一个任务事件，然后激活->" .. 激活的事件);
结束
定义函数 注册并激活循环处理任务( 处理任务的方式 )
	如果 不 存在事件("循环处理任务的绑定关系") 那么
		如果 不 存在事件("做完一个任务后") 那么
			注册普通事件(做完一个任务后, "做完一个任务后");
		结束
		绑定事件("处理完一个任务事件", "做完一个任务后", "循环处理任务的绑定关系");
	结束
	激活事件(处理任务的方式);
结束

定义函数 进行转职处理( 事件名 )
	如果 需要转职() 那么
		如果 角色在城镇中() 那么
			LuaLog("触发了->进行转职处理");
			默认转职();
		否则
			LuaLog("触发了->进行转职处理，但角色不在城镇中，继续处理任务");
		结束
		激活事件(获取事件绑定的数据("处理完一个任务事件"));
	否则
		中止事件(事件名);
		注册并激活循环处理任务(获取事件绑定的数据("处理完一个任务事件"));
	结束
结束
定义函数 转职事件后( 事件名 )
	LuaLog("触发了->转职事件");
	中止事件(事件名);
	中止事件("做完一个任务后");
	注册普通事件(进行转职处理, "进行转职处理");
	绑定事件("处理完一个任务事件", "进行转职处理");
	激活事件("处理完一个任务事件");
结束

注册普通事件(角色进入到游戏事件, "角色进入到游戏事件后");
绑定事件("角色进入到游戏事件", "角色进入到游戏事件后");

注册普通事件(疲劳值使用完事件, "疲劳值使用完事件后");
绑定事件("疲劳值使用完事件", "疲劳值使用完事件后");

注册普通事件(进入到副本事件, "进入到副本事件后");
绑定事件("进入到副本事件", "进入到副本事件后");

注册普通事件(从副本返回到城镇事件, "从副本返回到城镇事件后");
绑定事件("从副本返回到城镇事件", "从副本返回到城镇事件后");

定义函数 自动做一个任务处理事件()
	LuaLog("触发了->自动做一个任务处理事件");
结束
注册普通事件(自动做一个任务处理事件, "自动做一个任务处理事件后");
绑定事件("自动做一个任务处理事件", "自动做一个任务处理事件后");

定义函数 自动接和做任务事件()
	LuaLog("触发了->自动接和做任务事件");
结束
注册普通事件(自动接和做任务事件, "自动接和做任务事件后");
绑定事件("自动接和做任务事件", "自动接和做任务事件后");

----[[
遍历所有命名事件(定义函数( 事件名 )
	LuaLog("遍历到命名事件->" .. 事件名);
结束);
--]]
