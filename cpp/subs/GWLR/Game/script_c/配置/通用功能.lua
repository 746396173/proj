
--[[
自定义参数 是一个表结构，自定义参数[1]保存了 接_通用的接任务处理 函数所需要的信息
局部变量 接任务信息 = 自定义参数[1]
接任务信息[1] 保存了要接的任务所在的村庄名；接任务信息[2] NPC所在房间号

局部变量 提交任务信息 = 自定义参数[3]
提交任务信息[1] 保存了提交任务所在的村庄名；提交任务信息[2] NPC所在房间号
]]
定义函数 接_通用的接任务处理( 任务ID, 任务名, 自定义参数 )
	如果 自定义参数 == 空 那么
		LuaLogE("接_通用的接任务处理:" .. 任务名 .. "  自定义参数不能为空");
		返回 假
	结束

	局部变量 接任务信息 = 自定义参数[1]

	如果 没有 打开某个城镇的指定NPC(接任务信息[1], 得到发布任务的NpcId(任务ID), 接任务信息[2]) 那么
		LuaLogE("接任务时，打开某个城镇的指定NPC失败，任务名：" .. 任务名)
		返回 假
	结束

	如果 没有 接受指定ID的任务(任务ID) 那么
		返回 假
	结束
结束

定义函数 提交_通用的提交任务处理( 任务ID, 任务名, 自定义参数 )
	如果 自定义参数 == 空 那么
		LuaLogE("提交_通用的提交任务处理:" .. 任务名 .. "  自定义参数不能为空");
		返回 假
	结束

	局部变量 提交任务信息 = 自定义参数[3]

	如果 没有 打开某个城镇的指定NPC(提交任务信息[1], 得到提交任务的NpcId(任务ID), 提交任务信息[2]) 那么
		LuaLogE("提交任务时，打开某个城镇的指定NPC失败，任务名：" .. 任务名)
		返回 假
	结束

	如果 没有 提交指定ID的任务(任务ID) 那么
		返回 假
	结束
结束

定义函数 做_通用的对话任务处理( 任务ID, 任务名, 自定义参数 )
	如果 自定义参数 == 空 那么
		LuaLogE("做_通用的对话任务处理:" .. 任务名 .. "  自定义参数不能为空");
		返回 假
	结束

	局部变量 做任务信息 = 自定义参数[2]

	如果 没有 打开某个城镇的某个NPC(做任务信息[1], 做任务信息[2], 做任务信息[3], 做任务信息[4]) 那么
		LuaLogE("做任务时，打开某个城镇的某个NPC失败，任务名：" .. 任务名)
		返回 假
	结束

	进行NPC对话(任务ID)
结束

定义函数 做_通用的多个对话任务处理( 任务ID, 任务名, 自定义参数 )
	如果 自定义参数 == 空 那么
		LuaLogE("做_通用的多个对话任务处理:" .. 任务名 .. "  自定义参数不能为空");
		返回 假
	结束

	局部变量 做任务信息 = 自定义参数[2]
	如果 做任务信息 == 空 那么
		LuaLogE("做_通用的多个对话任务处理，不能没有表结构，任务名:" .. 任务名);
		返回 假
	结束

	for _, v in ipairs(做任务信息) 执行
		如果 没有 打开某个城镇的某个NPC(v[1], v[2]) 那么
			LuaLogE("做任务时，打开某个城镇的某个NPC失败，任务名：" .. 任务名)
			返回 假
		结束

		进行NPC对话(任务ID)
	结束
结束

--移动到指定的副本，采集完所有指定的房间，打死所有指定的怪物
定义函数 做_通用的打指定的副本( 任务ID, 任务名, 自定义参数 )
	如果 自定义参数 == 空 那么
		LuaLogE("做_通用的打指定的副本:" .. 任务名 .. "  自定义参数不能为空");
		返回 假
	结束

	存放一些背包物品到仓库(14)

	局部变量 做任务信息 = 自定义参数[2]
	如果 做任务信息 == 空 那么
		LuaLogE("做_通用的打指定的副本:" .. 任务名 .. "  做任务信息不能为空");
		返回 假
	结束
	局部变量 副本名 = 做任务信息[1]
	如果 副本名 == 空 那么
		LuaLogE("做_通用的打指定的副本:" .. 任务名 .. "  做任务信息里没有副本名信息");
		返回 假
	结束

	如果 没有 移动到指定的副本(副本名) 那么
		LuaLogE("做_通用的打指定的副本，在做\"" .. 任务名 .. "\"任务时，没有移动到这样的副本：\"" .. 副本名 .. "\"");
		返回 假
	结束

	局部变量 自定义函数 = 做任务信息[4]
	如果 自定义函数 ~= 空 那么
		自定义函数(任务ID, 任务名, 自定义参数)
	结束

	--采集完所有指定的房间
	局部变量 采集信息 = 做任务信息[3]
	如果 采集信息 ~= 空 那么
		for _, 房间号 in ipairs(采集信息) 执行
			移动到指定的房间(房间号);
			延迟(1000)
			自动采集完房间所有对象(5000)
		结束
	结束

	--打死所有指定的怪物
	局部变量 怪物信息 = 做任务信息[2]
	局部变量 怪物对象
	如果 怪物信息 ~= 空 那么
		for _, 怪物名 in ipairs(怪物信息) 执行
			怪物对象 = 查找指定名字的可打的对象(怪物名)
			循环 是有效的对象(怪物对象) 执行
				--如果 是BOSS对象(怪物对象) 那么
					--中断
				--结束
				如果 攻击指定的怪物直到死亡(怪物对象, 500) <= 0 那么
					中断
				结束
				通用_等待剥皮并剥皮()
				怪物对象 = 查找指定名字的可打的对象(怪物名)
			结束
		结束
	结束

	通用_杀死BOSS并剥皮()
	返回 通用_等待返回城镇()
结束

定义函数 通用_杀死指定数量的怪物并剥皮( 怪物名, 数量 )
	如果 数量 == 空 或 数量 <= 0 那么
		数量 = 100000
	结束
	局部变量 已杀数量 = 0
	局部变量 怪物对象 = 查找指定名字的可打的对象(怪物名)
	循环 是有效的对象(怪物对象) 执行
		如果 已杀数量 >= 数量 那么
			中断
		结束
		如果 攻击指定的怪物直到死亡(怪物对象, 500) <= 0 那么
			中断
		结束
		已杀数量 = 已杀数量 + 1
		通用_等待剥皮并剥皮()
		怪物对象 = 查找指定名字的可打的对象(怪物名)
	结束
结束

定义函数 通用_杀死指定怪物并剥皮得到任务物品( 怪物名, 任务物品名, 数量 )
	如果 数量 == 空 或 数量 <= 0 那么
		LuaLogE("用_杀死指定怪物并剥皮得到任务物品之数量参数不正常")
		返回
	结束
	局部变量 怪物对象 = 查找指定名字的可打的对象(怪物名)
	循环 是有效的对象(怪物对象) 执行
		如果 得到指定任务物品总数量(任务物品名) >= 数量 那么
			中断
		结束
		如果 攻击指定的怪物直到死亡(怪物对象, 500) <= 0 那么
			中断
		结束
		通用_等待剥皮并剥皮()
		怪物对象 = 查找指定名字的可打的对象(怪物名)
	结束
结束

定义函数 通用_等待剥皮并剥皮( 需要等待 )
	如果 需要等待 ~= 假 那么
		等待可剥皮(1000 * 8)
	结束
	剥完皮(1000)
结束

定义函数 通用_杀死BOSS并剥皮( 任务ID, 部位名 )
	局部变量 怪物对象
	循环 真 执行
		怪物对象 = 查找BOSS()
		如果 是有效的对象(怪物对象) 那么
			如果 任务ID ~= 空 那么
				根据当前任务自动设置当前BOSS的攻击部位(任务ID)
			否则如果 部位名 ~= 空 那么
				设置当前BOSS的攻击部位(部位名)
			结束
			如果 攻击指定的怪物直到死亡(怪物对象, 500) > 0 那么
				通用_等待剥皮并剥皮(真)
			结束
		否则
			中断
		结束
		延迟(1000)
	结束

	通用_等待剥皮并剥皮(假)
结束

定义函数 通用_等待杀死BOSS并剥皮( 任务ID, 部位名 )
	等待出现BOSS(1000 * 60 * 2)
	通用_杀死BOSS并剥皮(任务ID, 部位名)
结束

定义函数 通用_等待返回城镇()
	--先杀光
	杀光指定房间中所有怪物(500, 真, -1)

	--再采光
	--自动详细采集(500, -1, 空, 8)

	返回 等待返回城镇(1000 * 60 * 2)
结束

定义函数 通用_打死副本BOSS( 任务ID, 部位名 )
	等待角色可以移动(1000 * 60 * 2)
	通用_等待杀死BOSS并剥皮(任务ID, 部位名)
	返回 通用_等待返回城镇()
结束

定义函数 通用_杀死指定副本的BOSS( 副本名, 房间号 )
	如果 副本名 == 空 那么
		LuaLogE("通用_杀死指定副本的BOSS，副本名必须是字符串类型")
		返回 假
	结束
	如果 没有 移动到指定的副本(副本名) 那么
		LuaLogE("通用_杀死指定副本的BOSS，进副本失败：" .. 副本名)
		返回 假
	结束

	如果 房间号 ~= 空 那么
		移动到指定的房间(房间号)
	结束
	返回 通用_打死副本BOSS()
结束

定义函数 做_通用的杀死BOSS( 任务ID, 任务名, 自定义参数 )
	如果 自定义参数 == 空 那么
		LuaLogE("做_通用的杀死BOSS:" .. 任务名 .. "  自定义参数不能为空");
		返回 假
	结束
	局部变量 做任务信息 = 自定义参数[2]
	如果 做任务信息 == 空 那么
		LuaLogE("做_通用的杀死BOSS:" .. 任务名 .. "  做任务信息不能为空");
		返回 假
	结束
	局部变量 副本名 = 做任务信息[1]
	如果 副本名 == 空 那么
		LuaLogE("做_通用的杀死BOSS:" .. 任务名 .. "  做任务信息里没有副本名信息");
		返回 假
	结束

	返回 通用_杀死指定副本的BOSS(副本名, 做任务信息[2])
结束

定义函数 做_获取支给用冷饮()
	获取补给箱物品("支给用冷饮")
	延迟(2000)
	使用背包物品("支给用冷饮")
结束

定义函数 做_获取支给用热饮()
	获取补给箱物品("支给用热饮")
	延迟(2000)
	使用背包物品("支给用热饮")
结束

定义函数 判断血值()
	关闭当前执行信息()
	如果 获取角色当前血值() < 50 那么
		开启当前执行信息()
		返回 真
	结束
	开启当前执行信息()
结束

定义函数 使用物品加血()
	--LuaLog("使用物品加血")
	关闭当前执行信息()
	局部变量 物品 = 查找背包物品("支给用回复药")
	如果 是有效物品对象(物品) 那么
		使用背包物品("支给用回复药")
		开启当前执行信息()
		返回
	结束
	物品 = 查找背包物品("回复药")
	如果 是有效物品对象(物品) 那么
		使用背包物品("回复药")
		开启当前执行信息()
		返回
	结束
	物品 = 查找背包物品("回复药G")
	如果 是有效物品对象(物品) 那么
		使用背包物品("回复药G")
		开启当前执行信息()
		返回
	结束
	物品 = 查找背包物品("应急药")
	如果 是有效物品对象(物品) 那么
		使用背包物品("应急药")
		开启当前执行信息()
		返回
	结束
	开启当前执行信息()
结束

定义函数 通用_使用指定的物品加血( 物品名 )
	返回 定义函数 ()
		关闭当前执行信息()
		局部变量 物品 = 查找背包物品(物品名)
		如果 是有效物品对象(物品) 那么
			使用背包物品(物品名)
		结束
		开启当前执行信息()
	结束
结束

定义函数 判断在炎热状态()
	关闭当前执行信息()
	如果 在炎热状态() 那么
		开启当前执行信息()
		返回 真
	结束
	开启当前执行信息()
结束

定义函数 使用冷饮()
	--LuaLog("使用冷饮")
	关闭当前执行信息()
	局部变量 物品 = 查找背包物品("支给用冷饮")
	如果 是有效物品对象(物品) 那么
		使用背包物品("支给用冷饮")
	否则
		物品 = 查找背包物品("冷饮")
		如果 是有效物品对象(物品) 那么
			使用背包物品("冷饮")
		结束
	结束
	开启当前执行信息()
结束

定义函数 判断在寒冷状态()
	关闭当前执行信息()
	如果 在寒冷状态() 那么
		开启当前执行信息()
		返回 真
	结束
	开启当前执行信息()
结束

定义函数 使用热饮()
	--LuaLog("使用热饮")
	关闭当前执行信息()
	局部变量 物品 = 查找背包物品("支给用热饮")
	如果 是有效物品对象(物品) 那么
		使用背包物品("支给用热饮")
	否则
		物品 = 查找背包物品("热饮")
		如果 是有效物品对象(物品) 那么
			使用背包物品("热饮")
		结束
	结束
	开启当前执行信息()
结束

定义函数 判断在中毒状态()
	关闭当前执行信息()
	如果 在中毒状态() 那么
		开启当前执行信息()
		返回 真
	结束
	开启当前执行信息()
结束

定义函数 使用解毒药剂()
	--LuaLog("使用解毒药剂")
	关闭当前执行信息()
	局部变量 物品 = 查找背包物品("支给用解毒药")
	如果 是有效物品对象(物品) 那么
		使用背包物品("支给用解毒药")
	否则
		物品 = 查找背包物品("解毒药")
		如果 是有效物品对象(物品) 那么
			使用背包物品("解毒药")
		结束
	结束
	开启当前执行信息()
结束

定义函数 判断需要磨刀()
	关闭当前执行信息()
	如果 需要磨刀() 那么
		开启当前执行信息()
		返回 真
	结束
	开启当前执行信息()
结束

定义函数 使用砥石()
	--LuaLog("使用砥石")
	关闭当前执行信息()
	局部变量 物品 = 查找背包物品("支给用砥石")
	如果 是有效物品对象(物品) 那么
		使用背包物品("支给用砥石")
	否则
		物品 = 查找背包物品("砥石")
		如果 是有效物品对象(物品) 那么
			使用背包物品("砥石")
		结束
	结束
	开启当前执行信息()
结束

定义函数 通用_判断泥人状态()
	关闭当前执行信息()
	如果 是泥人状态() 那么
		开启当前执行信息()
		返回 真
	结束
	开启当前执行信息()
结束

定义函数 通用_处理泥人状态()
	处理泥人状态(1000 * 60)
结束

定义函数 通用_判断燃烧状态()
	关闭当前执行信息()
	如果 是燃烧状态() 那么
		开启当前执行信息()
		返回 真
	结束
	开启当前执行信息()
结束

定义函数 通用_处理燃烧状态()
	处理燃烧状态(1000 * 60)
结束

定义函数 通用_判断恶臭状态()
	关闭当前执行信息()
	如果 是恶臭状态() 那么
		开启当前执行信息()
		返回 真
	结束
	开启当前执行信息()
结束

定义函数 通用_处理恶臭状态()
	关闭当前执行信息()
	局部变量 物品 = 查找背包物品("支给用消臭玉")
	如果 是有效物品对象(物品) 那么
		使用背包物品("支给用消臭玉")
		开启当前执行信息()
		返回
	结束
	物品 = 查找背包物品("消臭玉")
	如果 是有效物品对象(物品) 那么
		使用背包物品("消臭玉")
		开启当前执行信息()
		返回
	结束
	开启当前执行信息()
结束

定义函数 通用_判断雪人状态()
	关闭当前执行信息()
	如果 是雪人状态() 那么
		开启当前执行信息()
		返回 真
	结束
	开启当前执行信息()
结束

定义函数 通用_处理雪人状态()
	处理雪人状态(1000 * 60)
结束

定义函数 通用_判断缠绕状态()
	关闭当前执行信息()
	如果 是缠绕状态() 那么
		开启当前执行信息()
		返回 真
	结束
	开启当前执行信息()
结束

定义函数 通用_处理缠绕状态()
	处理缠绕状态(1000 * 60)
结束

--每次进入副本会采集
--如果不想采集，可以设置这个变量为假，即：通用_需要进入副本后采集一些东西 = 假
通用_需要进入副本后采集一些东西 = 真
--具体想采集什么东西，可在这个函数里修改
定义函数 通用_进入副本后采集一些东西()
	如果 通用_需要进入副本后采集一些东西 ~= 真 那么
		返回
	结束

	--[[
	自动详细采集 这个函数允许采集指定的房间或所有的房间；允许设置采集的对象的最大数量，和对每个对象采集的最大次数；允许只采集特定名字的对象
	第一个参数是每次采集等待时间，数字类型，不可为空
	第二个参数是房间号，表示要在哪个房间进行采集；数字类型，可以为空，为空表示角色所在的房间号，为-1表示在所有房间进行采集
	第三个参数是采集对象的最大数量，表示最多采集指定数量的采集对象，数字类型，可以为空，表示没有数量限制；
	第四个参数是对每个采集对象采集的最大次数，数字类型，可以为空，表示没有次数限制
	第五个参数是采集物的名字，表示只采集具有该名字的对象，数字类型，可以为空，表示不管什么名字的对象都会被采集
	]]

	--在副本时可用 输出可采集物信息() 命令，来输出查看当前副本有哪些名字的东西可以被采集，然后把该名字填到 自动详细采集 的采集物名称的参数上去
	--自动详细采集(500, -1, 空, 8, "矿")
	--自动详细采集(500, -1, 空, 8, "虫")
	--自动详细采集(500, -1, 空, 8, "草")
	--自动详细采集(500, -1, 空, 8, "蘑菇")
	--自动详细采集(500, -1, 空, 8, "网")
	--自动详细采集(500, -1, 空, 8, "骨堆")

	--下面这个命令表示会采集所有可采集对象，每个可采集对象最多采集8次
	--如果你不想采集副本中所有的东西，那你可以把下面这条命令注释掉，另外把上面带名字的 自动详细采集 命令的注释给取消掉，你可以指定名字的采集物进行采集
	自动详细采集(500, -1, 空, 8, 空)
	移动到指定的房间(0)
结束

定义函数 通用_进入副本后的处理()
	--不要轻易删除它们，否则有可能影响正常升级脚本的使用
	获取补给箱物品("支给用冷饮")
	获取补给箱物品("支给用热饮")
	获取补给箱物品("支给用回复药")
	获取补给箱物品("支给用回复药")
	获取补给箱物品("支给用回复药")
	获取补给箱物品("支给用回复药")
	获取补给箱物品("应急药")
	获取补给箱物品("应急药")
	获取补给箱物品("应急药")
	获取补给箱物品("应急药")
	获取补给箱物品("支给用砥石")
	获取补给箱物品("支给用砥石")
	获取补给箱物品("支给用砥石")
	获取补给箱物品("携带粮草")
	获取补给箱物品("携带食料")
	获取补给箱物品("支给用解毒药")
	获取补给箱物品("支给用解毒药")
	获取补给箱物品("支给用解毒药")
	获取补给箱物品("支给用解毒药")
	获取补给箱物品("支给用染色玉")
	获取补给箱物品("蜂蜜弹")
	获取补给箱物品("支给用消臭玉")
	获取补给箱物品("支给用消臭玉")
	获取补给箱物品("支给用消臭玉")
	获取补给箱物品("支给用消臭玉")
	使用背包物品("携带粮草")
	使用背包物品("携带食料")
	--使用背包物品("支给用热饮")
	--使用背包物品("支给用冷饮")

	通用_进入副本后采集一些东西()
结束

定义函数 做_获取支给用冷饮和热饮()
	获取补给箱物品("支给用冷饮")
	获取补给箱物品("支给用热饮")
	延迟(2000)
	使用背包物品("支给用冷饮")
	延迟(2000)
	使用背包物品("支给用热饮")
结束

定义函数 通用_返回营地缴纳物品()
	如果 没有 移动到指定的房间(0) 那么
		返回
	结束
	局部变量 npc = 查找NPC("交纳箱")
	如果 是有效的对象(npc) 那么
		移动到指定的对象身前(npc)
		收刀()
		打开NPC格子面板(npc)
	结束
结束

定义函数 通用_强制采集指定的数量( 采集名, 采集数量, 房间号, 每个最大采集次数, 想要采集得到的物品名, 每次采集所做的事 )
	如果 采集名 == 空 那么
		LuaLogE("通用_强制采集指定的数量,采集名不能为空")
		返回 0
	结束
	如果 采集数量 == 空 那么
		采集数量 = -1
	结束
	如果 房间号 == 空 那么
		房间号 = -1
	否则
		移动到指定的房间(房间号)
	结束
	如果 每个最大采集次数 == 空 那么
		每个最大采集次数 = 8
	结束

	局部变量 数量 = 0
	局部变量 失败次数 = 0
	局部变量 采集到的对象数量 = 0
	重复
		等待出现采集对象(1000 * 60, 采集名, 房间号)
		采集到的对象数量 = 自动详细采集(500, 房间号, 采集数量 - 数量, 每个最大采集次数, 采集名, 想要采集得到的物品名, 每次采集所做的事)
		数量 = 数量 + 采集到的对象数量
		如果 采集到的对象数量 <= 0 那么
			失败次数 = 失败次数 + 1
			如果 失败次数 >= 3 那么
				LuaLogE("通用_强制采集指定的数量,失败次数过多，只采集到的数量：" .. tostring(数量))
				中断
			结束
		否则
			失败次数 = 0
		结束
	直到 数量 >= 采集数量

	返回 数量
结束

定义函数 通用_强制采集得到任务物品( 任务物品名, 任务物品数量, 采集名, 房间号 )
	如果 房间号 == 空 那么
		房间号 = -1
	否则
		移动到指定的房间(房间号)
	结束

	循环 真 执行
		如果 得到指定任务物品总数量(任务物品名) >= 任务物品数量 那么
			中断
		结束
		如果 采集名 ~= 空 那么
			等待出现采集对象(1000 * 60, 采集名, 房间号)
		结束
		如果 自动详细采集(500, 房间号, 1, 8, 采集名) <= 0 那么
			中断
		结束
	结束
结束

定义函数 通用_进行庄园采集()
	通用_购买一些采集所需物品()

	如果 没有 进入到自己的庄园() 那么
		返回
	结束


	清空存仓库物品白名单()
	添加存仓库物品白名单("自制铁镐")
	添加存仓库物品白名单("万能虫网")
	添加存仓库物品白名单("私人鱼篓")
	添加存仓库物品白名单("铁镐")
	添加存仓库物品白名单("捕虫网")
	添加存仓库物品白名单("渔夫鱼篓")
	添加存仓库物品白名单("捕鱼套装")

	从仓库中取物品("自制铁镐")
	从仓库中取物品("万能虫网")
	从仓库中取物品("私人鱼篓")
	从仓库中取物品("铁镐")
	从仓库中取物品("捕虫网")
	从仓库中取物品("渔夫鱼篓")
	从仓库中取物品("捕鱼套装")
	存放一些背包物品到仓库(100)


	--第二个参数是等级上限，即当前的等级若大于等级第二个参数，就不升级了。第二个参数为空表示无上限
	升级庄园采集("矿场", 空, 真)
	升级庄园采集("鱼塘", 空, 假)
	升级庄园采集("虫栖地", 空, 假)
	升级庄园采集("育菇木床", 空, 假)
	升级庄园采集("蜂房", 空, 假)
	升级庄园采集("草药田", 空, 假)

	保持购买一定数量的物品("庄园必须品", "捕鱼套装", 3, 3, 空, "库拉喵", 假)
	卖掉仓库和背包的垃圾物品(8, 20, 空, "库拉喵")
	通用配置_重置存仓库物品白名单()


	自动庄园采集(500, 空, 空, "草药田1")
	局部变量 种子名 = 获得一个已有的种子名()
	如果 字符串为空(种子名) 那么
		保持购买一定数量的物品("庄园必须品", "一级原料种子", 1, 1, 空, "库拉喵", 假)
		种子名 = 获得一个已有的种子名()
	结束
	种植种子(种子名, "草药田1")

	自动庄园采集(500, 空, 空, "草药田2")
	种子名 = 获得一个已有的种子名()
	如果 字符串为空(种子名) 那么
		保持购买一定数量的物品("庄园必须品", "一级原料种子", 1, 1, 空, "库拉喵", 假)
		种子名 = 获得一个已有的种子名()
	结束
	种植种子(种子名, "草药田2")

	自动庄园采集(500, 空, 空, "草药田3")
	种子名 = 获得一个已有的种子名()
	如果 字符串为空(种子名) 那么
		保持购买一定数量的物品("庄园必须品", "一级原料种子", 1, 1, 空, "库拉喵", 假)
		种子名 = 获得一个已有的种子名()
	结束
	种植种子(种子名, "草药田3")


	自动庄园采集(500, 空, 空, "矿场")
	自动庄园采集(500, 空, 空, "鱼塘")
	自动庄园采集(500, 空, 空, "虫栖地")
	自动庄园采集(500, 空, 空, "育菇木床")
	自动庄园采集(500, 空, 空, "蜂房")

	离开庄园()
结束

定义函数 通用_处理礼包()
	如果 没有 在城镇中() 那么
		返回
	结束
	自动领取礼包()
	--想要使用一些物品，就在这里添加，支持模糊匹配
	--每增加一个想要使用的物品，都要在 通用功能.lua里加一行 添加卖商店物品名白名单，否则该物品可能来不及使用就被卖掉了
	批量使用物品("礼包")
	批量使用物品("武器包")
	批量使用物品("福袋")
	批量使用物品("矿石袋")
	批量使用物品("艾露猫宝藏")
	批量使用物品("新年信封")
	批量使用物品("旧诗篇")
	批量使用物品("感谢信")
	批量使用物品("学者手册")
	批量使用物品("雪山的传说")
	批量使用物品("商队的传统")
	批量使用物品("有关西撒")
	批量使用物品("王立猎团")
	批量使用物品("奇面王的地位")
	批量使用物品("唤龙笛")
	批量使用物品("年前的英雄")
	批量使用物品("星龙鳞纹章")
	批量使用物品("坏灭的历史")
	批量使用物品("英雄之证")
	批量使用物品("扩容道具")
	批量使用物品("秘密的口袋")
	--批量使用物品("猎人公会储备箱")
	批量使用物品("钱袋")
	批量使用物品("小红包")
	--批量使用物品("收纳之书")
结束

定义函数 通用_打副本获取材料( 副本名, 部位名 )
	如果 没有 移动到指定的副本(副本名) 那么
		返回 假
	结束

	返回 通用_打死副本BOSS(空, 部位名)
结束

定义函数 通用_获取材料_去副本只采集( 副本名, 所有采集名 )
	如果 副本名 == 空 那么
		LuaLogE("通用_获取材料_去副本只采集之副本名不能为空")
		返回 假
	结束
	如果 没有 移动到指定的副本(副本名) 那么
		LuaLogE("通用_获取材料_去副本只采集之移动到该副本失败：" .. 副本名)
		返回 假
	结束

	局部变量 采集个数 = 0
	如果 所有采集名 == 空 那么
		采集个数 = 采集个数 + 自动详细采集(500, -1, 空, 8, 空)
	否则
		for _, 采集名 in ipairs(所有采集名) 执行
			采集个数 = 采集个数 + 自动详细采集(500, -1, 空, 8, 采集名)
		结束
	结束

	放弃关卡()
	返回 采集个数 > 0
结束

定义函数 通用_庄园采集获取材料( 采集名, 等级上限 )
	如果 没有 到了庄园采集的时间(采集名) 那么
		返回 假
	结束
	如果 没有 进入到自己的庄园() 那么
		返回 假
	结束

	升级庄园采集(采集名, 等级上限)

	局部变量 是否成功采集了 = 自动庄园采集(2000, 1, 空, 采集名) > 0
	离开庄园()
	返回 是否成功采集了
结束

定义函数 通用_采集并打指定的副本( 副本名, 所有采集名 )
	如果 副本名 == 空 那么
		LuaLogE("通用_采集指定的副本之副本名不能为空")
		返回 0
	结束
	如果 没有 移动到指定的副本(副本名) 那么
		LuaLogE("通用_采集指定的副本之移动到该副本失败：" .. 副本名)
		返回 0
	结束
	局部变量 采集个数 = 0
	如果 所有采集名 == 空 那么
		采集个数 = 采集个数 + 自动详细采集(500, -1, 空, 8, 空)
	否则
		for _, 采集名 in ipairs(所有采集名) 执行
			采集个数 = 采集个数 + 自动详细采集(500, -1, 空, 8, 采集名)
		结束
	结束
	通用_打死副本BOSS()
	放弃关卡()
	返回 采集个数
结束

定义函数 通用_主逻辑循环( 处理前, 处理中, 处理后, 第几个角色 )
	局部变量 每个场景处理 = 定义函数 ()
		如果 在选择角色界面() 那么
			--如果你想只选择某个名字的角色，请把下面的注释取消掉
			--选择指定名字的角色("角色名")

			--如果上面的注释取消了，下面这条命令必须加上注释
			如果 第几个角色 == 空 那么
				自动创建或选择角色()
			否则
				选择指定的角色(第几个角色)
			结束
		否则如果 已进入到游戏() 那么
			如果 处理前 ~= 空 那么
				如果 角色已进入游戏后(处理前) == 假 那么
					返回 假
				结束
			结束
			如果 处理中 ~= 空 那么
				如果 角色已进入游戏后(处理中) == 假 那么
					返回 假
				结束
			结束
			如果 处理后 ~= 空 那么
				如果 角色已进入游戏后(处理后) == 假 那么
					返回 假
				结束
			结束
		否则
			等待可选择角色(1000 * 60)
		结束

		延迟(2000)
		返回 真
	结束

	循环 真 执行
		如果 处理游戏场景(每个场景处理) == 假 那么
			中断
		结束
	结束
结束

定义函数 通用_自动升级身上装备()
	自动升级身上装备(通用配置_武器商人所在地图信息)
结束

定义函数 通用_发送邮件( 邮寄的物品, 金币, 邮寄的角色名 )
	--添加好友(邮寄的角色名)

	局部变量 成功次数, 当前状态 = 0, 0
	重复
		当前状态 = 发送邮件(邮寄的物品, 金币, 邮寄的角色名, "米拉德村", "信差艾露秋梨欧")
		如果 当前状态 > 0 那么
			成功次数 = 成功次数 + 当前状态
		结束
	直到 当前状态 <= 0
	返回 成功次数
结束

定义函数 通用_邮寄任意物品( 指定邮寄数量, 金币, 邮寄的角色名 )
	局部变量 成功次数, 当前状态 = 0, 0
	重复
		当前状态 = 邮寄任意物品(指定邮寄数量, 金币, 邮寄的角色名, "米拉德村", "信差艾露秋梨欧")
		如果 当前状态 > 0 那么
			成功次数 = 成功次数 + 当前状态
		结束
	直到 当前状态 <= 0
	返回 成功次数
结束

--这个命令像这样使用：通用_做悬赏任务({ { "限时", "试炼" }, { "初阵", "试炼" }, { "倒地", "试炼" }, { "白金", "试炼" }, { "黄金", "试炼" } }, "希美伦山路", "赏金看板")
--"限时", "初阵", "倒地", "白金"，这些类型的赏金可以任意添加、删除，也可以添加任意你想打的悬赏任务
--可以选择“试炼”或“挑战”模式，也可以不选择，表示任意模式，像这样：{ "限时" }。如果想选择模式的话，像这样：{ "限时", "试炼" }，或{ "限时", "挑战" }
--想先打哪种类型的赏金，就把哪种类型的赏金配到前面
定义函数 通用_做悬赏任务( 赏金任务类型, 城镇名, 看板, 赏金目标副本黑名单 )
	局部变量 任务ID = 获取一个可提交的赏金任务ID()
	如果 是有效的任务ID(任务ID) 那么
		如果 没有 打开某个城镇的某个NPC(城镇名, 看板, 空, 空, 真) 那么
			LuaLogE("通用_做悬赏任务之没有打开NPC，城镇：" .. 城镇名 .. " NPC:" .. 看板)
			返回 假
		结束
		返回 提交指定ID的任务(任务ID)
	结束

	关闭当前执行信息()
	如果 赏金任务类型 ~= 空 那么
		清空赏金任务白名单()
		for _, 任务类型 in ipairs(赏金任务类型) 执行
			添加赏金任务白名单(任务类型[1], 任务类型[2])
		结束
	结束
	如果 赏金目标副本黑名单 ~= 空 那么
		清空赏金目标副本黑名单()
		for _, 副本ID in ipairs(赏金目标副本黑名单) 执行
			添加赏金目标副本黑名单(副本ID)
		结束
	结束
	开启当前执行信息()

	局部变量 副本ID
	任务ID, 副本ID = 获取一个可做的赏金任务ID()
	如果 不 是有效的任务ID(任务ID) 那么
		如果 今日剩余可接赏金任务数量() <= 0 那么
			返回 假
		结束
		任务ID, 副本ID = 获取一个可接的赏金任务ID()
		如果 不 是有效的任务ID(任务ID) 那么
			LuaLogW("通用_做悬赏任务之没有可接的赏金任务")
			返回 假
		结束

		如果 没有 打开某个城镇的某个NPC(城镇名, 看板, 空, 空, 真) 那么
			LuaLogE("通用_做悬赏任务之没有打开NPC，城镇：" .. 城镇名 .. " NPC:" .. 看板)
			返回 假
		结束
		如果 没有 接受指定ID的任务(任务ID) 那么
			LuaLogE("通用_做悬赏任务之接任务失败，任务名：" .. 获取任务名(任务ID));
			返回 假
		结束
	结束

	局部变量 真实副本ID = 获取任务所做副本ID(任务ID)
	如果 真实副本ID == 空 或 副本ID == 空 那么
		LuaLogE("通用_做悬赏任务之获取任务所做的副本失败，任务名：" .. 获取任务名(任务ID));
		放弃指定ID的任务(任务ID)
		返回 假
	结束

	如果 没有 移动到指定的副本_ID(副本ID) 那么
		LuaLogE("通用_做悬赏任务，进副本失败:" .. 根据ID获取副本名(副本ID))
		返回 假
		--返回 假, 副本ID
	结束

	如果 没有 通用_打死副本BOSS(任务ID) 那么
		返回 假, 副本ID
	结束

	如果 没有 打开某个城镇的某个NPC(城镇名, 看板, 空, 空, 真) 那么
		LuaLogE("通用_做悬赏任务之没有打开NPC，城镇：" .. 城镇名 .. " NPC:" .. 看板)
		返回 假
	结束

	局部变量 未完成任务ID = 任务ID
	任务ID = 获取一个可提交的赏金任务ID()
	如果 是有效的任务ID(任务ID) 那么
		提交指定ID的任务(任务ID)
	否则
		如果 真实副本ID == 副本ID 那么
			放弃指定ID的任务(未完成任务ID)
			LuaLogE("通用_做悬赏任务，未完成该任务:" .. 获取任务名(未完成任务ID) .. " 所做的副本：" .. 根据ID获取副本名(副本ID))
			返回 假, 副本ID
		结束
	结束
	返回 真
结束

定义函数 通用_智能做一个悬赏任务()
	如果 通用配置_打赏金失败次数 >= 1 那么
		返回 假
	结束
	--当武器等级大于等于20级，才会去做悬赏。如果想要开启此功能，请把下面的注释取消掉（后面的 结束 也得取消注释）
	--如果 得到物品等级(获取当前所穿武器()) >= 20 那么
		如果 真 那么
			局部变量 旧的服务器已满次数 = 获取错误_副本服务器已满次数()
			局部变量 做赏金成功, 未完成副本ID = 通用_做悬赏任务(通用配置_所有想要打的悬赏任务, "希美伦山路", "赏金看板", 通用配置_所有未完成赏金副本)
			如果 做赏金成功 ~= 真 那么
				如果 未完成副本ID == 空 那么
					如果 获取错误_副本服务器已满次数() <= 旧的服务器已满次数 那么
						通用配置_打赏金失败次数 = 通用配置_打赏金失败次数 + 1
					结束
				否则
					如果 通用配置_打不赢赏金也要接着打 == 假 那么
						给表添加一个唯一的值(通用配置_所有未完成赏金副本, 未完成副本ID)
					结束
				结束
			否则
				通用配置_打赏金失败次数 = 0
			结束
			返回 做赏金成功
		结束
	--结束

	返回 假
结束

定义函数 通用_打一个指定的喵喵副本( 副本名, 打副本函数 )
	如果 不 可做指定的喵喵副本(副本名) 那么
		返回 假
	结束
	如果 没有 打开某个城镇的某个NPC("梅杰波尔坦", "圈尾思奇", 空, 2, 假) 那么
		返回 假
	结束
	如果 没有 移动到指定的喵喵副本(副本名) 那么
		返回 假
	结束
	如果 打副本函数 == 空 那么
		打副本函数 = 通用_打死副本BOSS
	结束

	局部变量 结果 = 打副本函数()
	返回 结果, 根据副本名获取副本ID(副本名)
结束

定义函数 通用_按顺序打一个指定的喵喵副本( 所有副本信息, 副本黑名单 )
	如果 角色等级() < 40 那么
		返回 假
	结束
	如果 所有副本信息 == 空 那么
		返回 假
	结束

	关闭当前执行信息()
	如果 副本黑名单 ~= 空 那么
		清空喵喵副本黑名单()
		for _, 副本 in ipairs(副本黑名单) 执行
			添加喵喵副本黑名单(副本)
		结束
	结束
	开启当前执行信息()

	局部变量 打副本函数
	局部变量 参数信息
	局部变量 旧的服务器已满次数 = 获取错误_副本服务器已满次数()
	for _, 副本信息 in ipairs(所有副本信息) 执行
		如果 可做指定的喵喵副本(副本信息[1]) 那么
			打副本函数 = 副本信息[2]
			如果 打副本函数 ~= 空 那么
				参数信息 = 副本信息[3]
				如果 参数信息 == 空 那么
					参数信息 = {}
				结束
				局部变量 打副本函数_ = 打副本函数
				打副本函数 = 定义函数 () 打副本函数_(unpack(参数信息)) 结束
			结束
			局部变量 成功, 副本ID = 通用_打一个指定的喵喵副本(副本信息[1], 打副本函数)
			如果 成功 == 真 或 副本ID ~= 空 那么
				返回 成功, 副本ID
			结束
			如果 成功 == 假 且 获取错误_副本服务器已满次数() > 旧的服务器已满次数 那么
				返回 成功, 副本ID
			结束
		结束
	结束

	返回 假
结束

定义函数 通用_智能做一个喵喵副本()
	局部变量 成功, 副本ID = 通用_按顺序打一个指定的喵喵副本(通用配置_所有想要打的喵喵副本, 通用配置_所有未完成的喵喵副本)
	如果 成功 == 真 那么
		返回 成功
	结束
	如果 成功 == 假 且 副本ID ~= 空 那么
		如果 通用配置_打不赢喵喵副本也要接着打 == 假 那么
			给表添加一个唯一的值(通用配置_所有未完成的喵喵副本, 副本ID)
		结束
	结束
	返回 成功
结束

定义函数 通用_打一个指定的王立副本( 副本名, 打副本函数 )
	如果 没有 移动到指定的王立副本(副本名) 那么
		返回 假
	结束
	如果 打副本函数 == 空 那么
		打副本函数 = 通用_打死副本BOSS
	结束
	局部变量 结果 = 打副本函数()
	返回 结果, 根据副本名获取副本ID(副本名)
结束

定义函数 通用_按顺序打一个指定的王立副本( 所有副本信息, 副本黑名单, 副本索引 )
	局部变量 当前角色等级 = 角色等级()
	如果 当前角色等级 < 40 那么
		返回 假
	结束
	如果 所有副本信息 == 空 那么
		返回 假
	结束
	如果 副本索引 == 空 那么
		LuaLogE("通用_按顺序打一个指定的王立副本之副本索引参数不能为空")
		返回 假
	结束

	关闭当前执行信息()
	如果 副本黑名单 ~= 空 那么
		清空副本黑名单()
		for _, 副本 in ipairs(副本黑名单) 执行
			添加副本黑名单(副本)
		结束
	结束
	scmd():TestTheFbType(所有副本信息, { 4, 29 })
	开启当前执行信息()

	局部变量 打副本函数
	局部变量 参数信息
	局部变量 旧的服务器已满次数 = 获取错误_副本服务器已满次数()
	for 索引, 副本信息 in ipairs(所有副本信息) 执行
		如果 索引 >= 副本索引 那么
			局部变量 等级限制 = 副本信息[2]
			如果 等级限制 == 空 或 当前角色等级 >= 等级限制 那么
				打副本函数 = 副本信息[3]
				如果 打副本函数 ~= 空 那么
					参数信息 = 副本信息[4]
					如果 参数信息 == 空 那么
						参数信息 = {}
					结束
					局部变量 打副本函数_ = 打副本函数
					打副本函数 = 定义函数 () 打副本函数_(unpack(参数信息)) 结束
				结束
				局部变量 成功, 副本ID = 通用_打一个指定的王立副本(副本信息[1], 打副本函数)
				如果 成功 == 真 那么
					返回 成功, 副本ID, 索引 + 1
				结束
				如果 成功 == 假 那么
					如果 副本ID ~= 空 那么
						返回 成功, 副本ID, 索引 + 1
					否则如果 获取错误_副本服务器已满次数() > 旧的服务器已满次数 那么
						返回 成功, 副本ID, 索引
					结束
				结束
			结束
		结束
	结束

	返回 假, 空, table.maxn(所有副本信息) + 1
结束

定义函数 通用_智能做一个王立副本()
	局部变量 成功, 副本ID, 当前要打第几个王立副本 = 通用_按顺序打一个指定的王立副本(通用配置_所有想要打的王立副本, 通用配置_所有未完成的王立副本, 通用配置_索引_当前要打第几个王立副本)

	如果 成功 == 假 且 副本ID ~= 空 那么
		如果 通用配置_打不赢王立副本也要接着打 == 假 那么
			给表添加一个唯一的值(通用配置_所有未完成的王立副本, 副本ID)
		结束
	结束
	如果 当前要打第几个王立副本 ~= 空 那么
		通用配置_索引_当前要打第几个王立副本 = 当前要打第几个王立副本
		如果 通用配置_索引_当前要打第几个王立副本 > table.maxn(通用配置_所有想要打的王立副本) 那么
			通用配置_重置当前要打第几个王立副本索引()
		结束
	结束
	返回 成功
结束

定义函数 通用_打一个指定的王立精英副本( 副本名, 解锁物品名, 打副本函数 )
	如果 没有 移动到指定的王立精英副本(副本名, 解锁物品名) 那么
		返回 假
	结束
	如果 打副本函数 == 空 那么
		打副本函数 = 通用_打死副本BOSS
	结束
	局部变量 结果 = 打副本函数()
	返回 结果, 根据副本名获取副本ID(副本名)
结束

定义函数 通用_按顺序打一个指定的王立精英副本( 所有副本信息, 副本黑名单, 副本索引 )
	局部变量 当前角色等级 = 角色等级()
	如果 当前角色等级 < 40 那么
		返回 假
	结束
	如果 所有副本信息 == 空 那么
		返回 假
	结束
	如果 副本索引 == 空 那么
		LuaLogE("通用_按顺序打一个指定的王立精英副本之副本索引参数不能为空")
		返回 假
	结束

	关闭当前执行信息()
	如果 副本黑名单 ~= 空 那么
		清空副本黑名单()
		for _, 副本 in ipairs(副本黑名单) 执行
			添加副本黑名单(副本)
		结束
	结束
	scmd():TestTheFbType(所有副本信息, { 26, 29, 34 })
	开启当前执行信息()

	局部变量 打副本函数
	局部变量 参数信息
	局部变量 旧的服务器已满次数 = 获取错误_副本服务器已满次数()
	for 索引, 副本信息 in ipairs(所有副本信息) 执行
		如果 索引 >= 副本索引 那么
			局部变量 额外信息 = 副本信息[2]
			局部变量 解锁物品
			局部变量 等级限制 = 1
			如果 额外信息 ~= 空 那么
				解锁物品 = 额外信息[1]
				如果 额外信息[2] ~= 空 那么
					等级限制 = 额外信息[2]
				结束
			结束
			如果 当前角色等级 >= 等级限制 那么
				打副本函数 = 副本信息[3]
				如果 打副本函数 ~= 空 那么
					参数信息 = 副本信息[4]
					如果 参数信息 == 空 那么
						参数信息 = {}
					结束
					局部变量 打副本函数_ = 打副本函数
					打副本函数 = 定义函数 () 打副本函数_(unpack(参数信息)) 结束
				结束
				局部变量 成功, 副本ID = 通用_打一个指定的王立精英副本(副本信息[1], 解锁物品, 打副本函数)
				如果 成功 == 真 那么
					返回 成功, 副本ID, 索引 + 1
				结束
				如果 成功 == 假 那么
					如果 副本ID ~= 空 那么
						返回 成功, 副本ID, 索引 + 1
					否则如果 获取错误_副本服务器已满次数() > 旧的服务器已满次数 那么
						返回 成功, 副本ID, 索引
					结束
				结束
			结束
		结束
	结束

	返回 假, 空, table.maxn(所有副本信息) + 1
结束

定义函数 通用_智能做一个王立精英副本()
	局部变量 成功, 副本ID, 当前要打第几个王立精英副本 = 通用_按顺序打一个指定的王立精英副本(通用配置_所有想要打的王立精英副本, 通用配置_所有未完成的王立精英副本, 通用配置_索引_当前要打第几个王立精英副本)

	如果 成功 == 假 且 副本ID ~= 空 那么
		如果 通用配置_打不赢王立精英副本也要接着打 == 假 那么
			给表添加一个唯一的值(通用配置_所有未完成的王立精英副本, 副本ID)
		结束
	结束
	如果 当前要打第几个王立精英副本 ~= 空 那么
		通用配置_索引_当前要打第几个王立精英副本 = 当前要打第几个王立精英副本
		如果 通用配置_索引_当前要打第几个王立精英副本 > table.maxn(通用配置_所有想要打的王立精英副本) 那么
			通用配置_重置当前要打第几个王立精英副本索引()
		结束
	结束
	返回 成功
结束

定义函数 通用_领取狩猎券( 身上所拥有狩猎券最低数量 )
	如果 不 在城镇中() 那么
		返回
	结束

	如果 type(身上所拥有狩猎券最低数量) ~= "number" 那么
		身上所拥有狩猎券最低数量 = 12
	结束

	for 次数 = 1, 7 执行
		如果 没有 领取周狩猎券() 那么
			中断
		结束
		如果 剩余狩猎券() >= 身上所拥有狩猎券最低数量 那么
			返回
		结束
		延迟(1500)
	结束

	局部变量 要使用用的物品名 = { "狩猎券", "狩猎许可证", "狩猎券兑换币" }
	for _, 物品名 in ipairs(要使用用的物品名) 执行
		如果 剩余狩猎券() >= 身上所拥有狩猎券最低数量 那么
			返回
		结束
		使用背包物品(物品名)
	结束

	如果 得到拥有的银币() > 700 且 角色等级() >= 20 那么
		保持购买一定数量的物品("特产商店", "狩猎券兑换币", 1, 2, "米拉德村", "莉薇")
	结束
结束

定义函数 通用_初始化一次任务处理()
	如果 通用配置_已经初始化过一次任务处理了 == 真 那么
		返回
	结束
	通用配置_已经初始化过一次任务处理了 = 真

	清空任务处理()
	初始化所有任务处理()
结束

定义函数 通用_脚本停止时的处理()
	通用配置_已经初始化过一次任务处理了 = 假
	设置上次运行顶级脚本名("")
	通用_进入角色后每次循环之前的处理 = 空
	特殊的配置数据 = 空
结束

如果 通用_进入角色后每次循环之前的处理 == 空 那么
	定义函数 通用_进入角色后每次循环之前的处理()
		返回 真
	结束
结束

定义函数 通用_处理进入角色后的每次循环( 每次循环处理函数, ... )
	如果 每次循环处理函数 == 空 那么
		LuaLogE("通用_处理进入角色后的每次循环之每次循环处理函数参数不能为空")
		返回
	结束
	循环 真 执行
		如果 通用_进入角色后每次循环之前的处理() == 假 那么
			中断
		结束
		如果 安全执行之跳过异常(每次循环处理函数, 真, ...) == 假 那么
			中断
		结束
		延迟(5000)
	结束
结束

定义函数 通用_仓库号交易时的处理()
	如果 没有 面对面交易_锁定交易栏() 那么
		返回 假
	结束

	如果 没有 面对面交易_确认交易() 那么
		返回 假
	结束
结束

定义函数 通用_仓库号交易后的处理()
	存放一些背包物品到仓库(100)
结束

定义函数 通用_仓库号进行当面交易()
	返回 进行面对面交易(通用_仓库号交易前的处理, 通用_仓库号交易时的处理, 通用_仓库号交易后的处理)
结束

定义函数 通用_普通号交易后的处理()
结束

定义函数 通用_普通号进行当面交易()
	返回 进行面对面交易(通用_普通号交易前的处理, 通用_普通号交易时的处理, 通用_普通号交易后的处理)
结束

定义函数 通用_购买一些打怪所需物品()
	--第七个参数是是否采纳金币限制，如果为真，设置不去保持购买之财富限制 这个命令会生效，否则不生效。该参数可以为空，默认为真
	保持购买一定数量的物品("狩猎补给品", "回复药", 6, 6, "希美伦山路", "流浪的斯通", 真)
	保持购买一定数量的物品("狩猎补给品", "砥石", 13, 13, "希美伦山路", "流浪的斯通")
	保持购买一定数量的物品("狩猎补给品", "解毒药", 7, 7, "希美伦山路", "流浪的斯通")
	保持购买一定数量的物品("狩猎补给品", "冷饮", 5, 5, "希美伦山路", "流浪的斯通")
	保持购买一定数量的物品("狩猎补给品", "热饮", 5, 5, "希美伦山路", "流浪的斯通")
结束

定义函数 通用_购买一些采集所需物品()
	保持购买一定数量的物品("狩猎补给品", "铁镐", 10, 10, "希美伦山路", "流浪的斯通")
	保持购买一定数量的物品("狩猎补给品", "捕虫网", 10, 10, "希美伦山路", "流浪的斯通")
	保持购买一定数量的物品("狩猎补给品", "捕鱼套装", 10, 10, "希美伦山路", "流浪的斯通")
结束

定义函数 通用_推迟使用一次背包物品( 物品名 )
	如果 type(物品名) ~= "string" 那么
		LuaLogE("通用_推迟使用一次背包物品之物品名参数必须是字符串类型")
		返回
	结束
	返回 定义函数() 使用背包物品(物品名) 结束
结束

定义函数 通用_购买物品获取材料( 物品名, 地图信息, npc栏目 )
	如果 角色等级() < 8 那么
		返回
	结束

	如果 type(地图信息) ~= "table" 那么
		LuaLogE("通用_购买物品获取材料之地图信息参数必须是表类型")
		返回
	结束
	局部变量 村庄名, npc名
	for _, 信息 in ipairs(地图信息) 执行
		如果 打开某个城镇的某个NPC(信息[1], 信息[2]) 那么
			村庄名 = 信息[1]
			npc名 = 信息[2]
			中断
		结束
	结束
	如果 村庄名 == 空 且 npc名 == 空 那么
		LuaLogE("通用_购买物品获取材料之没有找到NPC")
		返回
	结束

	如果 没有 保持购买一定数量的物品(npc栏目, 物品名, 1, 1, 村庄名, npc名, 假) 那么
		返回
	结束
	返回 真
结束

定义函数 通用_锻造装备获取材料( 装备名 )
	如果 type(装备名) ~= "string" 那么
		LuaLogE("通用_锻造装备获取材料之装备名参数必须是字符串类型")
		返回
	结束
	如果 角色等级() < 8 那么
		返回
	结束

	返回 自动打造装备(装备名, 1)
结束

定义函数 通用_添加装备获取映射( 装备名, 获取方式, ... )
	返回 添加材料获取映射(装备名, 获取方式, 装备名, ...)
结束
