


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 头文件
#include "stdafx.h"
#include <strsafe.h>
#include <WinUser.h>
#include "BugTrace.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#pragma comment(linker, "/EXPORT:CreateUploadBOSDDumpThread=_AheadLib_CreateUploadBOSDDumpThread,@1")
#pragma comment(linker, "/EXPORT:InitializeBugTrace=_AheadLib_InitializeBugTrace,@2")
#pragma comment(linker, "/EXPORT:SetBOSDDumpInfo=_AheadLib_SetBOSDDumpInfo,@3")
#pragma comment(linker, "/EXPORT:UploadBOSDDump=_AheadLib_UploadBOSDDump,@4")

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
PVOID pfnCreateUploadBOSDDumpThread;
PVOID pfnInitializeBugTrace;
PVOID pfnSetBOSDDumpInfo;
PVOID pfnUploadBOSDDump;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 宏定义
#define EXTERNC extern "C"
#define NAKED __declspec(naked)
#define EXPORT __declspec(dllexport)

#define ALCPP EXPORT NAKED
#define ALSTD EXTERNC EXPORT NAKED void __stdcall
#define ALCFAST EXTERNC EXPORT NAKED void __fastcall
#define ALCDECL EXTERNC NAKED void __cdecl
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AheadLib 命名空间
namespace AheadLib
{
	HMODULE m_hModule = NULL;	// 原始模块句柄
	DWORD m_dwReturn[4] = {0};	// 原始函数返回地址

	void WINAPI GetAddress();

	// 加载原始模块
	BOOL WINAPI Load()
	{
		CHAR tzPath[MAX_PATH];
		CHAR tzTemp[MAX_PATH * 2];

		strcpy_s(tzPath, TEXT("BugTrace_"));
		m_hModule = LoadLibraryA(tzPath);
		if (m_hModule == NULL)
		{
			sprintf_s(tzTemp, TEXT("无法加载 %s，程序无法正常运行。"), tzPath);
			//MessageBox(NULL, tzTemp, TEXT("AheadLib"), MB_ICONSTOP);
		}
		else
			GetAddress();
		return (m_hModule != NULL);	
	}
		
	// 释放原始模块
	VOID WINAPI Free()
	{
		if (m_hModule)
		{
			FreeLibrary(m_hModule);
		}
	}

	// 获取原始函数地址
	FARPROC WINAPI GetAddress(PCSTR pszProcName)
	{
		FARPROC fpAddress;
		CHAR szProcName[16];
		TCHAR tzTemp[MAX_PATH];

		fpAddress = GetProcAddress(m_hModule, pszProcName);
		if (fpAddress == NULL)
		{
			if (HIWORD(pszProcName) == 0)
			{
				sprintf_s(szProcName, "%d", pszProcName);
				pszProcName = szProcName;
			}

			sprintf_s(tzTemp, TEXT("无法找到函数 %hs，程序无法正常运行。"), pszProcName);
			//MessageBox(NULL, tzTemp, TEXT("AheadLib"), MB_ICONSTOP);
			ExitProcess(-2);
		}

		return fpAddress;
	}
	// 获取原始函数地址
	void WINAPI GetAddress()
	{
		pfnCreateUploadBOSDDumpThread=GetAddress("CreateUploadBOSDDumpThread");
		pfnInitializeBugTrace=GetAddress("InitializeBugTrace");
		pfnSetBOSDDumpInfo=GetAddress("SetBOSDDumpInfo");
		pfnUploadBOSDDump=GetAddress("UploadBOSDDump");
	}
}
using namespace AheadLib;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 入口函数
BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)
{
	if (dwReason == DLL_PROCESS_ATTACH)
	{
		DisableThreadLibraryCalls(hModule);

		return Load();
	}
	else if (dwReason == DLL_PROCESS_DETACH)
	{
		Free();
	}

	return TRUE;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_CreateUploadBOSDDumpThread(void)
{
	__asm JMP pfnCreateUploadBOSDDumpThread;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_InitializeBugTrace(void)
{
	__asm JMP pfnInitializeBugTrace;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_SetBOSDDumpInfo(void)
{
	__asm JMP pfnSetBOSDDumpInfo;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_UploadBOSDDump(void)
{
	__asm JMP pfnUploadBOSDDump;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
